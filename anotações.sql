<!------------------------>

/*FOREIGN KEY - CHAVE ESTRANGEIRA
  É A CHAVE PRIMARIA DE UMA TABELA, QUE VAI ATE OUTRA TABELA FAZER REFERENCIA 
  
  EM RELACIONAMENTOS 1 X 1 A CHAVE ESTRANGEIRA FICA NA TABELA MAIS FRACA

  EM RELACIONAMENTOS 1 X N A CHAVE ESTRANGEIRA FICARA SEMPRE NA TABELA N
*/

*/
/*######################################################################*/
-------
/* PERFOMANCE EM OPERADORES LOGICOS*/

/*
	PARA CONTAR
	
	SELECT COUNT(*) FROM CLIENTE;
	
	SELECT SEXO, COUNT(*) FROM CLIENTE
	GROUP BY SEXO;
	
	SELECT CIDADE, COUNT(*) FROM CLIENTE 
	GROUP BY SEXO;
	
	CONDICAO
	
	SEXO = F
	CIDADE = RIO DE JANEIRO
	


 */

/* modelagem basica */

/*
TABELA CLIENTE

NOME
CPF
EMAIL
TELEFONE
SEXO
ENDERECO
*/

/* PROCESSOS DE MODELAGEM */

/*
	ADM de dados:
	
	modelagem conceitual - rascunho
	modelagem logica - programas como BRmodelo
	modelagem fisica - script do banco de dados 
	
	
	
*/
/*
TABELA CLIENTE

NOME caracter(30)
CPF numerico(11)
EMAIL caracter(30)
TELEFONE caracter(30)
SEXO caracter(1)
ENDERECO caracter(100)
*/

CREATE DATABASE PROJETO;

/*CONECTANDO*/

USE PROJETO;

CREATE TABLE CLIENTE(
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR(100)
);

/*verificando as tabelas*/

SHOW TABLES;

/* descrevendo tabelas */

DESC CLIENTE;

/*INSERÇAO DE DADOS AO BANCO DE DADOS*/

INSERT INTO CLIENTE VALUES('JOAO','M','JOAO@GMAIL.COM',988638273,'22923110','MAIA LACERDA - ESTÁCIO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541521456,'25078869','RIAHUELO - CENTRO - RIO DE JANEIRO - RJ');

INSERT INTO CLIENTE VALUES('JORGE','M',NULL,885755896,'58748895','OSCAR CURY - BOM RETIRO - PATOS DE MINAS - MG');


/*SEGUNDA FORMA DE INSERT - caso queira inserir de uma forma diferente, incluindo ou nao uma coluna*/

INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES ('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

/*insert compacto*/

INSERT INTO CLIENTE VALUES ('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
							('CARLA','F','CARLA@TERRATI.COM',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');

/* selects */

SELECT NOW();

SELECT 'FELIPE MAFRA';

SELECT 'BANCO DE DADOS';

/* alias de colunas */

SELECT 'FELIPE MAFRA' AS PROFESSOR;

SELECT NOME, SEXO, EMAIL FROM CLIENTE;

SELECT * FROM CLIENTE;

/*FILTRANDO*/

SELECT NOME,SEXO FROM CLIENTE WHERE SEXO = 'M';

SELECT NOME, SEXO FROM CLIENTE WHERE SEXO = 'F';

SELECT NOME, SEXO FROM CLIENTE WHERE ENDERECO = 'RJ';

/*FILTRANDO UTILIZANDO O LIKE, TRABALHA COM CARCTERE CORINGA %*/
SELECT NOME, SEXO FROM CLIENTE WHERE ENDERECO LIKE 'RJ';

SELECT NOME, SEXO FROM CLIENTE WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE ENDERECO LIKE '%CENTRO%';



/*OPERADORES LOGICOS*/

/* OR - OU */
SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE SEXO = 'M' OR ENDERECO LIKE '%RJ';

SELECT NOME, EMAIL FROM CLIENTE WHERE SEXO = 'M' OR ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE SEXO = 'F' OR ENDERECO LIKE '%ESTACIO';

/* AND - E*/

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE SEXO = 'M' AND ENDERECO LIKE '%RJ';

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE SEXO = 'F' AND ENDERECO LIKE '%ESTACIO';


/* CONT(*, GROUP BY, PERFOMANCE COM OPERADORES LOGICOS */

/* CONTANDO OS REGITROS DE UMA TABELA */

SELECT COUNT(*) FROM CLIENTE;

SELECT COUNT(*) AS "QUANTIDADE" FROM CLIENTE;

/* OPERADOR GROUP BY */

SELECT SEXO, COUNT(*) AS "QUANTIDADE" FROM CLIENTE GROUP BY SEXO;


/* FILTRANDO VALORES NULOS */

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE EMAIL = NULL; /* nulo nao pode igualar (errado)*/

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE EMAIL IS NULL; /* CORRETO*/

SELECT NOME, SEXO, ENDERECO FROM CLIENTE WHERE EMAIL IS NOT NULL; /* QUANDO O COMANDO NAO É NULO*/

/* UTILIZANDO O UPDATE PARA ATUALIZAR VALORES*/

SELECT NOME, EMAIL FROM CLIENTE;

UPDATE CLIENTE SET EMAIL = 'LILIAN@HOTMAIL.COM'; /* nunca usar update sem where*/

UPDATE CLIENTE SET EMAIL = 'JOAO@HOTMAIL.COM'
WHERE NOME = 'JOAO';
							/*
 Caracteres especias -> char e varchar (utilizar o char quando o número de caracter da coluna nunca for variante) 
 numeross -> float e int
 imagens -> blob
 textos -> text
 
 ----ENUM = ENUMERAÇÃO ----
 group by - agrupa os registros por condições
 count(*) - conta o números de registros
 
 ----Tipos numericos----
 (float -> numeros reais (13,8989)
 float(total,virgula) float(10,2), sao dez casas no total, duas delas vai ser depois da virgula, float(7,3), sete casas no total e tres casas depois da virgula )
 
 int -> numeros inteiros (10,50,23), maior numero de algorismo é 11 digitos.
(numeros que não necessitam de cálculos podem ser tipados como varchar!)

 var e char -> vai ter aspas simples
 int -> nao vai ter aspas
 
*/

/*Deletando registros com a clasula delete*/

DELETE FROM CLIENTE;

SELECT COUNT(*) FROM CLIENTE;

DELETE FROM CLIENTE
WHERE NOME = 'ANA';

SELECT COUNT(*) FROM CLIENTE;


/*Entrando com mais telefones*/

UPDATE CLIENTE
SET TELEFONE = '22923110 - 97865434'
WHERE NOME = 'JOAO';

SELECT ENDERECO, COUNT(*) AS 'QUANTIDADE' FROM CLIENTE GROUP BY ENDERECO;

INSERT INTO CLIENTE VALUES('CELIA','F','CELIA@GMAIL.COM',541524456,'58749965','RIACHUELO - CENTRO - RIO DE JANEIRO - RJ');

SELECT SEXO, COUNT(*) AS QUANTIDADE FROM CLIENTE GROUP BY SEXO;

/*1º forma normal*/

/* 1- TODO CAMPO VETORIZADO SE TORNARA OUTRA TABELA */

/*
[azul, amarelo, verde, laranja] - ALIMENTOS DE UM MESMO TIPO
[KA, FIT, FIESTA, CIVIC, UNO] - VETOR DE CARRO

*/

/* 2- TODO CAMPO MULTIVALORADO SE TORNARA OUTRA TABELA */

/*
UM CAMPO DIVISIVEL, OS ELEMENTOS NAO SAO DA MESMA NATUREZA

*/

/* 3 - TODA TABELA NECESSITA DE PELO MENOS UM CAMPO QUE IDENTIFIQUE TODO O REGISTRO COMO SENDO UNICO */

/*
CHAVE PRIMARIA - PRMARY KEY
*/



/*CARDINANIDADE*/


(1,1) - se tem é verdadeiro (obrigatorio)
(0,1) - Falso nao é obrigatorio
(1,n) - O 1 quando quero o maximo de um, e o N nao quero o maximo
(0,n) - 

obs: obrigatoridade primeiro algarismo e o segundo algarismo é a cardinanidade

Primeiro algarismo - obrigatoridade
0 - nao obrigatorio
1 - obrigatorio

segundo algarismo - cardnalidade
1 - maximo de um
N - mais de um


/* MODELAGEM DE CLIENTE */

CREATE DATABASE COMERCIO;

USE COMERCIO;

CREATE TABLE CLIENTE(
    IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30) NOT NULL,
    SEXO ENUM('M','F') NOT NULL,
    EMAIL VARCHAR(50) UNIQUE,
    CPF VARCHAR(15) UNIQUE    
);

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
    TIPO ENUM('COM','RES','CEL'),
    NUMERO VARCHAR(10),
    ID_CLIENTE INT,
    FOREIGN KEY(ID_CLIENTE)
    REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE ENDERECO(
    IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
    RUA VARCHAR(30) NOT NULL,
    BAIRRO VARCHAR(30) NOT NULL,
    CIDADE VARCHAR(30) NOT NULL,
    ESTADO CHAR(2) NOT NULL,
    ID_CLIENTE INT UNIQUE,
    FOREIGN KEY(ID_CLIENTE)
    REFERENCES CLIENTE(IDCLIENTE)
);

/*INSERINDO DADOS*/
INSERT INTO CLIENTE VALUES(NULL,'JOAO','M','JOAO@IG.COM','98547-6');
INSERT INTO CLIENTE VALUES(NULL,'CARLOS','M','CARLOS@TERA.COM','86664-7');
INSERT INTO CLIENTE VALUES(NULL,'ANA','F','ANA@GLOBO.COM','75658-5');
INSERT INTO CLIENTE VALUES(NULL,'JORGE','M','JORGE@IG.COM','88657-5');
INSERT INTO CLIENTE VALUES(NULL,'CLARA','M',NULL,'99754-7');
INSERT INTO CLIENTE VALUES(NULL,'CELIA','F','JOAO@TERRA.COM','77558-5');

SELECT * FROM CLIENTE;

/*INSERINDO UM REGISTRO ERRADO*/

INSERT INTO CLIENTE VALUES(NULL,'ANTONIO','M','JOAO@IG.COM');

/*CORRIGINDO*/

INSERT INTO CLIENTE VALUES(NULL,'ANTONIO','M',NULL,'78558-6');
INSERT INTO CLIENTE VALUES(NULL,'JOAO','M',NULL,'86695-6');


/*MODELAGEM TABELA ENDERECO */ 

/*DESCRICAO DA TABELA*/

DESC ENDERECO;

/*INSERINDO INFORMAÇÃO*/

INSERT INTO ENDERECO VALUES(NULL,'RUA A','CENTRO','B.HORIZONTE','MG',4);
INSERT INTO ENDERECO VALUES(NULL,'RUA B','CENTRO','RIO DE JANEIRO','RJ',1);
INSERT INTO ENDERECO VALUES(NULL,'RUA C','JARDINS','SAO PAULO','SP',3);
INSERT INTO ENDERECO VALUES(NULL,'RUA B','ESTACIO','RIO DE JANEIRO','RJ',8);
INSERT INTO ENDERECO VALUES(NULL,'RUA Z','CRUZEIRO','B.HORIZONTE','MG',2);
INSERT INTO ENDERECO VALUES(NULL,'RUA X','FLAMENGO','RIO DE JANEIRO','RJ',7);
INSERT INTO ENDERECO VALUES(NULL,'RUA Z','CRUZEIRO','B.HORIZONTE','MG',5);
INSERT INTO ENDERECO VALUES(NULL,'RUA X','CENTRO','NITERÓI','RJ',6);

/*MODELAGEM TABELA TELEFONE */

INSERT INTO TELEFONE VALUES(NULL,'CEL','9955331',1);
INSERT INTO TELEFONE VALUES(NULL,'COM','6574565',3);
INSERT INTO TELEFONE VALUES(NULL,'CEL','8864566',2);
INSERT INTO TELEFONE VALUES(NULL,'CEL','5557798',7);
INSERT INTO TELEFONE VALUES(NULL,'COM','6765768',1);
INSERT INTO TELEFONE VALUES(NULL,'RES','5676765',6);
INSERT INTO TELEFONE VALUES(NULL,'CEL','5765547',1);
INSERT INTO TELEFONE VALUES(NULL,'CEL','8865645',7);
INSERT INTO TELEFONE VALUES(NULL,'RES','7555446',7);
INSERT INTO TELEFONE VALUES(NULL,'CEL','5788654',3);
INSERT INTO TELEFONE VALUES(NULL,'CEL','7865644',6);
INSERT INTO TELEFONE VALUES(NULL,'RES','5754644',6);


SELECT * FROM CLIENTE;
SELECT * FROM ENDERECO;
SELECT * FROM TELEFONE;

/*A 21 */
/*SELECAO, PROEJCAO E JUNCAO*/

/* PROJECAO - TUDO QUE QUEREMOS PROJETAR NA TELA   */

SELECT NOW();   /* MOSTRANDO A DATA E HORA*/

SELECT NOW() AS "DATA"; /*CONSTRUINDO A COLUNA*/

SELECT NOME, NOW() AS "DATA" FROM CLIENTE; /*PROJECAO*/



/* SELECAO - TEORIA DOS CONJUNTOS - WHERE É AS CLAUSULA DE SELECAO*/

SELECT NOME, SEXO FROM CLIENTE;


SELECT NOME, SEXO FROM CLIENTE WHERE SEXO = 'M'; /*SELECAO*/

UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE = 5; /* SELECAO */


/*JUNCAO*/
/* NOME, SEXO, BAIRRO, CIDADE, DATA*/

SELECT NOME, SEXO, BAIRRO, CIDADE, NOW() AS "DATA" FROM CLIENTE, ENDERECO
WHERE IDCLIENTE = ID_CLIENTE; /*SELEÇÃO*/

SELECT NOME, SEXO, BAIRRO, CIDADE, NOW() AS "DATA" FROM CLIENTE, ENDERECO
WHERE IDCLIENTE = ID_CLIENTE AND BAIRRO = 'CENTRO';


INSERT INTO ENDERECO VALUES(NULL,'RUA U','CENTRO','NITERÓI','RJ',1000);

/* JOIN - JUNCAO DAS TABELAS */

SELECT NOME, SEXO, BAIRRO, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
WHERE BAIRRO = 'CENTRO';

/* AMBIGOUS PONTEIRO*/
SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE
INNER JOIN ENDERECO
ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
INNER JOIN TELEFONE
ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;

/* APELIDOS */
SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'M';



/* QUERIES */

ON C.CLIENTE = T.ID_CLIENTE
WHERE SEXO = 'M';

/*
    PARA UMA CAMPANHA DE MARKETING, O SETOR SOLICITOU UM RELATORIO COM O NOME, EMAIL E TELEFONE CELULAR DOS CLIENTES QUE MORAM NO ESTADO DO RIO DE JANEIRO VOCE TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA O PROGRAMADOR 

*/

SELECT C.NOME, C.EMAIL, T.NUMERO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE TIPO = 'CEL' AND ESTADO = 'RJ';

+---------+----------------+---------+
| NOME    | EMAIL          | NUMERO  |
+---------+----------------+---------+
| JOAO    | JOAO@IG.COM    | 9955331 |
| JOAO    | JOAO@IG.COM    | 5765547 |
| ANTONIO | NULL           | 5557798 |
| ANTONIO | NULL           | 8865645 |
| CELIA   | JOAO@TERRA.COM | 7865644 |
+---------+----------------+---------+

/*
PARA UMA CAMPANHA DE PRODUTOS DE BELEZA, O COMERCIAL SOLICITOU UM RELATORIO COM O NOME, EMAIL E TELEFONE CELULAR DAS MULHERES QUE MORAM NO ESTADO DE SAO PAULO VOCE TERA QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA O PROGRAMADOR.
*/

SELECT NOME, EMAIL, NUMERO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON IDCLIENTE = E.ID_CLIENTE
WHERE SEXO = 'F' AND TIPO = 'CEL' AND ESTADO = 'SP';

+------+---------------+---------+
| NOME | EMAIL         | NUMERO  |
+------+---------------+---------+
| ANA  | ANA@GLOBO.COM | 5788654 |
+------+---------------+---------+


/* IFNULL */

SELECT C.NOME AS "CLIENTE", 
       IFNULL(C.EMAIL,'SEM EMAIL') AS "EMAIL",
       T.NUMERO AS "CELULAR"
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE TIPO = 'CEL' AND ESTADO = 'RJ';

+---------+----------------+---------+
| NOME    | EMAIL          | NUMERO  |
+---------+----------------+---------+
| JOAO    | JOAO@IG.COM    | 9955331 |
| JOAO    | JOAO@IG.COM    | 5765547 |
| ANTONIO | SEM EMAIL      | 5557798 |
| ANTONIO | SEM EMAIL      | 8865645 |
| CELIA   | JOAO@TERRA.COM | 7865644 |
+---------+----------------+---------+

/*IFNULL(C.EMAIL,'SEM EMAIL')*/


/* VIEWS OU VISOES */

SELECT C.NOME, C.SEXO, 
       IFNULL(C.EMAIL,'SEM EMAIL') AS "E-MAIL",
       T.TIPO,
       T.NUMERO, 
       E.BAIRRO, 
       E.CIDADE, 
       E. ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;

/* CRIANDO A VIEW */

CREATE VIEW V_RELATORIO AS
SELECT C.NOME, C.SEXO, 
       IFNULL(C.EMAIL,'SEM EMAIL') AS "E-MAIL",
       T.TIPO,
       T.NUMERO, 
       E.BAIRRO, 
       E.CIDADE, 
       E. ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;

SELECT * FROM RELATORIO;

SELECT * FROM RELATORIO
WHERE SEXO = 'F';

SHOW TABLES;
+--------------------+
| Tables_in_COMERCIO |
+--------------------+
| CLIENTE            |
| ENDERECO           |
| RELATORIO          |
| TELEFONE           |
+--------------------+

/* APAGANDO UMA VIEW */

DROP VIEW RELATORIO;

/* PROJEÇÃO NA VIEW */

SELECT NOME, SEXO, CIDADE
FROM V_RELATORIO;

/* DELETANDO NA VIEW (obs: não é com todas views)*/

DELETE FROM V_RELATORIO
WHERE NOME = 'JOAO';

ERROR: ERROR 1395 (HY000): Can not delete from join view 'COMERCIO.V_RELATORIO'

/* INSERINDO NA VIEW (obs: não é com todas views)*/

INSERT INTO V_RELATORIO VALUES
('ROMARIO','M',NULL,'RES','99723882','BARRA','RIO DE JANEIRO','RJ');

ERROR: ERROR 1395 (HY000): Can not delete from join view 'COMERCIO.V_RELATORIO'

/* ORDER BY */

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE;

/* ORDEM ALFABETICA*/

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY NOME;

/* ORDENAÇÃO POR DUAS COLUNAS */

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY NOME,CPF ASC;

/* ORDENAÇÃO POR COLUNA */

SELECT NOME, SEXO, CPF, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
ORDER BY 4;

/* DELIMITADOR E ESTADO DE SERVIDOR */

SELECT * FROM V_RELATORIO;

DELIMITER $                 <= /* muda o valor do delimitador ';' passa ser '$'*/

STATUS                      <= /* VERIFICAR O STATUS DO BANCO DE DADOS*/

/* PROCEDURES */
/*PRIMEIRO PASSO DA PROCEDURE É DEFINIR O DELIMITADOR*/

CREATE PROCEDURE NOME()
BEGIN
    ACAO;
END
$ 

SELECT 10 + 10 AS "CONTAS"$

CREATE PROCEDURE CONTA()
BEGIN
    SELECT 10 + 10 AS "CONTA";
END
$


/* CHAMANDO UMA PROCEDURE (SIMPLES)*/

CALL CONTA()$

/* PROCEDURES COM PARAMENTROS */

DROP PROCEDURE CONTA;

CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN
    SELECT NUMERO1 + NUMERO2 AS "CONTA";
END
$

CALL CONTA(100,78);


/*PROCEDURES COM TABELAS*/

CREATE TABLE CURSOS (
    IDCURSOS INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30) NOT NULL,
    HORAS INT(3) NOT NULL,
    VALOR FLOAT(10,2) NOT NULL
);

INSERT INTO CURSOS VALUES(NULL,'BANCO DE DADOS FUNDAMENTAL',25,200.00);

/*DELIMITADOR*/

DELIMITER #

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),P_HORAS INT(3),P_PRECO FLOAT(10,2))
BEGIN
    INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);
END
#

CALL CAD_CURSO('BI SQL SERVER',35,200.00);

SELECT * FROM CURSOS;

CREATE PROCEDURE SEL_CURSO()
BEGIN
    SELECT IDCURSO, NOME, HORAS, VALOR
    FROM CURSOS;
END
#

CALL SEL_CURSOS();

/* FUNÇÕES DE AGREGAÇÕES NUMERICAS */


CREATE TABLE VENDEDORES(
    IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    SEXO CHAR(1),
    JANEIRO FLOAT(10,2),
    FEVEREIRO FLOAT(10,2),
    MARCO FLOAT(10,2)
);

INSERT INTO VENDEDORES VALUES(NULL,'CARLOS','M',76234.78,88346.87,5756.90);
INSERT INTO VENDEDORES VALUES(NULL,'MARIA','F',5865.78,6768.87,4467.90);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO','M',78769.78,6685.87,6664.90);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA','F',5779.78,446886.87,8965.90);
INSERT INTO VENDEDORES VALUES(NULL,'ANDERSON','M',676545.78,77544.87,578665.90);
INSERT INTO VENDEDORES VALUES(NULL,'IVONE','F',57789.78,44774.87,68665.90);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO','M',4785.78,66478.87,6887.90);
INSERT INTO VENDEDORES VALUES(NULL,'CELIA','F',89667.78,57654.87,5755.90);

/* MAX - TRAZ O VALOR MAXIMO DE UMA COLUNA */


SELECT MAX(FEVEREIRO) AS MAIOR_FEV
FROM VENDEDORES;

/* MIN - TRAZ O VALOR MINIMO DE UMA COLUNA */

SELECT MIN(FEVEREIRO) AS MENOR_FEV
FROM VENDEDORES;

/* AVG - TRAZ O VALOR MEDIO DE UMA COLUNA */

SELECT AVG(FEVEREIRO) AS MEDIO_FEV
FROM VENDEDORES;

/* VARIAS FUNÇÕES */

SELECT MAX(JANEIRO) AS MAX_JAN,
       MIN(JANEIRO) AS MIN_JAN,
       AVG(JANEIRO) AS MEDIA_JAN
FROM VENDEDORES;

/* TRUNCATE */
/* OBS: ESTAMOS USANDO DOIS PARAMENTROS AONDE 1º NUM, 2º QTD EX: 100,999,2 ṔASSA A SER 100.99*/

SELECT MAX(JANEIRO) AS MAX_JAN,
       MIN(JANEIRO) AS MIN_JAN,
       TRUNCATE(AVG(JANEIRO),2) AS MEDIA_JAN 
FROM VENDEDORES;


/* AGREGAÇÃO COM SUM */

SELECT SUM(JANEIRO) AS TOTAL_JAN
FROM VENDEDORES;

SELECT SUM(JANEIRO) AS TOTAL_JAN
FROM VENDEDORES;

SELECT SUM(JANEIRO) AS TOTAL_JAN,
       SUM(FEVEREIRO) AS TOTAL_FEV,
       SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES;


/* VENDAS POR SEXO */

SELECT SEXO, SUM(MARCO) AS TOTAL_MARCO
FROM VENDEDORES
GROUP BY SEXO;

/* VENDEDOR QUE VENDEU MENOS EM MARCO E O SEU NOME */
/*SUBQUERIES*/
/* NOME E O VALOR QUE VENDEU MAIS EM MARCO, 
QUEM VENDEU MAIS QUE O VALOR MEDIO DE FEV */

SELECT NOME, MIN(MARCO) AS MIN_MARCO
FROM VENDEDORES
GROUP BY NOME;

SELECT MIN(MARCO) FROM VENDEDORES;

/* VALOR MINIMO */
SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

/* VALOR MAXIMO */

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

/* VALOR MEDIO */

SELECT NOME, FEVEREIRO FROM VENDEDORES
WHERE FEVEREIRO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

SELECT AVG(FEVEREIRO) FROM VENDEDORES;

/* MENOR QUE A MEDIA */

SELECT NOME, FEVEREIRO FROM VENDEDORES
WHERE FEVEREIRO < (SELECT AVG(FEVEREIRO) FROM VENDEDORES);


/* OPERACOES EM LINHA */

SELECT * FROM VENDEDORES;

SELECT NOME,
       JANEIRO,
       FEVEREIRO,
       MARCO,
       (JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
       TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/ 3,2) AS "MEDIA"
FROM
    VENDEDORES;


/* APLICANDO UMA %*/

SELECT NOME,
       JANEIRO,
       FEVEREIRO,
       MARCO,
       (JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
       (JANEIRO+FEVEREIRO+MARCO) * .25 AS "DESCONTO",
       TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/ 3,2) AS "MEDIA"
FROM
    VENDEDORES;

/* ALTERANDO TABELAS */

CREATE TABLE TABELA(
    COLUNA1 VARCHAR(30),
    COLUNA2 VARCHAR(30),
    COLUNA3 VARCHAR(30),
);

/*-- ADICIONANDO UMA PK --*/

ALTER TABLE TABELA
ADD PRIMARY KEY(COLUNA1);

/*-- ADICIONANDO COLUNA SEM POSIÇÃO, ULTIMA POSIÇÃO --*/

ALTER TABLE TABELA
ADD COLUNA VARCHAR(30);


ALTER TABLE TABELA
ADD COLUNA100 INT;

/*-- ADICIONANDO UMA COLUNA COM POSIÇÃO --*/

ALTER TABLE TABELA
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

/*-- MODIFICANDO O TIPO DE UM CAMPO --*/

ALTER TABLE TABELA MODIFY COLUNA2 DATE NOT NULL;

/*-- RENOMEANDO O NOME DA TABELA --*/

ALTER TABLE TABELA
RENAME PESSOA;

CREATE TABLE TIME(
    IDTIME INT PRIMARY KEY AUTO_INCREMENT,
    TIME VARCHAR(30),
    ID_PESSOA VARCHAR(30)
);

/*-- FOREIGN KEY --*/

ALTER TABLE TIME
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COLUNA1);


/*-- VERIFICAR AS CHAVES --*/

SHOW CREATE TABLE TIME;



/* ORGANIZAÇÃO DE CHAVES - CONSTRAINT (REGRA) */


CREATE TABLE JOGADOR(
    IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30)
);

CREATE TABLE TIMES(
    IDTIME INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    ID_JOGADOR INT,
    FOREIGN KEY(ID_JOGADOR)
    REFERENCES JOGADOR(IDJOGADOR)
);

INSERT INTO JOGADOR VALUES (NULL,'GUERREIRO');

INSERT INTO TIMES VALUES (NULL,'FLAMENGO',1);

SHOW CREATE TABLE JOGADOR;
SHOW CREATE TABLE TIMES;


/* ORGANIZAÇÃO DE CHAVES E ACOES DE CONSTRAINTS */

SHOW TABLES;

DROP TABLE ENDERECO;
DROP TABLE TELEFONE;
DROP TABLE CLIENTE;


CREATE TABLE CLIENTE(
    IDCLIENTE INT,
    NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
    IDTELEFONE INT,
    TIPO CHAR(3) NOT NULL,
    NUMERO VARCHAR(10) NOT NULL,
    ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE 
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

SHOW CREATE TABLE TELEFONE;

/* DICIONARIO DE DADOS */

OS BANCOS DE DADOS PADROES DO DICIONARIO SÃO O "INFORMATION_SCHEMA", "MYSQL" E "PERFOMANCE_SCHEMA"

SHOW DATABASES;

USE INFORMATION_SCHEMA;

SHOW TABLES;

DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO", 
       TABLE_NAME AS "TABELA", 
       CONSTRAINT_NAME AS "NOME REGRA",
       CONSTRAINT_TYPE AS "TIPO"
FROM
    TABLE_CONSTRAINTS
    WHERE CONSTRAINT_SCHEMA = 'COMERCIO';

/* APAGANDO CONSTRAINT */

ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;

/* REVISAO CARDINALIDADE */ (REVISAO ILUSTRADA SOBRE FOREIGN KEYS)

1X1: CHAVE ESTRANGEIRA SEMPRE FICARA NA TABELA MAIS FRACA DEPENDENDO DA ANALISE DO NEGOCIO.

1XN: CHAVE ESTRANGEIRA SEMPRE FICARA NA CARDINALIDADE 'N'.

NXN: TERÁ AUXILIO DE UMA TABELA ASSOCIATIVA (CHAVE PRIMARIA COMPOSTA).


/* EXERCICIOS */

CREATE DATABASE PROJETO;

USER PROJETO;

CREATE TABLE



/* MODELO FISICO DO EXERCICIO */

CREATE DATABASE OFICINA;

USE OFICINA;

CREATE TABLE CLIENTE(
    IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30) NOT NULL,
    SEXO ENUM('M','F') NOT NULL,
    ID_CARRO INT UNIQUE
);

CREATE TABLE TELEFONE(
   IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
   TIPO ENUM('CEL','RES','COM') NOT NULL,
   NUMERO VARCHAR(30) NOT NULL,
   ID_CLIENTE INT
);

CREATE TABLE MARCA(
   IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
   MARCA VARCHAR(30) UNIQUE
);

CREATE TABLE CARRO(
  IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
  MODELO VARCHAR(30) NOT NULL,
  PLACA VARCHAR(30) NOT NULL UNIQUE,
  ID_MARCA INT
);

CREATE TABLE COR(
  IDCOR INT PRIMARY KEY AUTO_INCREMENT,
  COR VARCHAR(30) UNIQUE
);

CREATE TABLE CARRO_COR(
    ID_CARRO INT,
    ID_COR INT,
    PRIMARY KEY(ID_CARRO,ID_COR)
);


/* CONSTRAINTS EXERCICIO */

ALTER TABLE TELEFONE
ADD CONSTRAINT FK_TELEFONE_CLIENTE
FOREIGN KEY(ID_CLIENTE)
REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO
ADD CONSTRAINT FK_CARRO_MARCA
FOREIGN KEY(ID_MARCA)
REFERENCES MARCA(IDMARCA);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR
FOREIGN KEY(ID_COR)
REFERENCES COR(IDCOR);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);

/* PREENCHER O BANCO COM O NO MINIMO 10 CLIENTES */

INSERT INTO CARRO VALUES(NULL,'')


/* ENTENDO TRIGGERS */

/* ESTRUTURA DE UMA TRIGGER - GATILHO */


CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW (PARADA CADA LINHA)

BEGIN -> INICIO
    QUALQUER COMANDO SQL
END -> FIM

CREATE DATABASE AULA40;

USE AULA40;

CREATE TABLE USUARIO(
    IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    LOGIN VARCHAR(30),
    SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
    IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
    IDUSUARIO INT,
    NOME VARCHAR(30),
    LOGIN VARCHAR(30)
);

/* CRIANDO A TRIGGER */

DELIMITER $

CREATE TRIGGER BACKUP_USER
BEFORE DELETE  ON USUARIO
FOR EACH ROW 

BEGIN 
    INSERT INTO BKP_USUARIO VALUES
    (NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);
END
$ 


INSERT INTO USUARIO VALUES(NULL, 'ANDRADE','ANDRADE2009','HEXACAMPEAO');

SELECT * FROM USUARIO;

DELETE FROM USUARIO WHERE IDUSUARIO = 1;

SELECT * FROM BKP_USUARIO;

/* COMUNICACAO ENTRE BANCOS */

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10,2)
);

STATUS --> VERIFICAR QUAL BNACO QUE ESTA CONECTADO

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
    IDBKP INT PRIMARY KEY AUTO_INCREMENT,
    IDPRODUTO INT,
    NOME VARCHAR(30),
    VALOR FLOAT(10,2)
);


USE LOJA;

STATUS

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE',0.0);

SELECT * FROM BACKUP.BKP_PRODUTO;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUT
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);   
    
END
$

DELIMITER ;


// TESTANDO 

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);


//VERFICANDO OS REGISTROS 

SELECT * FROM PRODUTO;

//SELECIONANDO A TABELA DE BACKUP

SELECT * FROM BACKUP.BKP_PRODUTO;

//FAZENDO BACKUP ENQUANTO DELETA

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DELETE
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR);   
    
END
$

// TESTANDO DELETANDO UM PRODUTO NA TABELA

DELETE FROM PRODUTO WHERE IDPRODUTO = 2;

DROP TRIGGER BACKUP_PRODUT;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);   
    
END
$


INSERT INTO PRODUTO VALUES(NULL,'LIVRO C#',100.00);

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO;

ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1);

DROP TRIGGER BACKUP_PRODUTO_DELETE;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DELETE
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,'D');   
    
END
$

DELETE FROM PRODUTO WHERE IDPRODUTO = 4;

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;


/* TRIGGER DE AUDITORIA */


DELIMITER ;

DROP DATABASE LOJA;

DROP DATABASE BACKUP;

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10,2)
);

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);

//CRIANDO TABELA DE BACKUP

// MOSTRA DADA E HORA DO BANCO DE DADOS - QUANDO
SELECT NOW();

//MOSTRA QUAL USUARIO ESTA CONECTADO NO BANCO - QUEM
SELECT CURRENT_USER(); 

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
    IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
    IDPRODUTO INT,
    NOME VARCHAR(30),
    VALOR_ORIGINAL FLOAT(10,2),
    VALOR_ALTERADO FLOAT(10,2),
    DATA DATETIME,
    USUARIO VARCHAR(30),
    EVENTO CHAR(1)
);

// VOLTANDO PARA O BANCO LOJA

USE LOJA;

CREATE TABLE PRODUTO(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10,2)
);

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);

SELECT * FROM PRODUTO;

// CRIANDO TRIGGER

DELIMITER $

CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW 
BEGIN

    INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,
    OLD.VALOR,NEW.VALOR, NOW(), CURRENT_USER(), 'U');

END
$


// ALTERANDO UM PRODUTO (TESTE)

UPDATE PRODUTO
SET 
VALOR = 110.00
WHERE
IDPRODUTO = 4;

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;


/* AUTORELACIONAMENTO */

CREATE DATABASE AULA44;

CREATE TABLE CURSOS(
    IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    HORAS INT,
    VALOR FLOAT(10,2),
    ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSINESS INTELLIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANCADOS',20,600.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA PROGRAMACAO',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',30,500.00,NULL);


SELECT * FROM CURSOS;

// DADOS FILTRADO SEM VALORES NULOS

SELECT NOME, VALOR, HORAS, IFNULL(ID_PREREQ,"SEM REQ") REQUSITO
FROM CURSOS;

/* NOME, VALOR, HORAS E O NOME DO PRE REQUESISTO DO CURSO */

/*SELECT 
C.NOME AS CURSO,
C.VALOR AS VALOR,
C.HORAS AS CARGA, 
IFNULL(P.NOME, "---") AS PREREQ
FROM CURSOS C
INNER JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;*/

SELECT 
C.NOME AS CURSO,
C.VALOR AS VALOR,
C.HORAS AS CARGA, 
IFNULL(P.NOME, "---") AS PREREQ
FROM CURSOS C
LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;

/* CURSORES */

CREATE DATABASE CURSORES;

USE CURSORES;

CREATE TABLE VENDEDORES(
    IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(50),
    JAN INT,
    FEV INT,
    MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL,'MAFRA',32432,242334,574545);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA',65465,65443,653454);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO',12432,65356,8756);
INSERT INTO VENDEDORES VALUES(NULL,'LILIAN',4567,9676,8765);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO',3467,68756,99765);
INSERT INTO VENDEDORES VALUES(NULL,'GLORIA',54786,76889,7098);

/* CONFERINDO */

SELECT * FROM VENDEDORES;

/* TOTAL */

SELECT NOME, (JAN+FEV+MAR) AS TOTAL FROM VENDEDORES; 

/* MEDIA */

SELECT NOME, (JAN+FEV+MAR) AS TOTAL, (JAN+FEV+MAR)/3 AS MEDIA
FROM VENDEDORES;

CREATE TABLE VEND_TOTAL(
    NOME VARCHAR(50),
    JAN INT,
    FEV INT,
    MAR INT,
    TOTAL INT,
    MEDIA INT
);

DELIMITER $

CREATE PROCEDURE INSEREDADOS()
BEGIN

    DECLARE FIM INT DEFAULT 0;
    DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
    DECLARE VNOME, VARCHAR(50);

    DECLARE REG CURSOR FOR(
        SELECT NOME, JAN, FEV, MAR FROM VENDEDORES;
    );

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;

END
$